heat_template_version: 2013-05-23

description: Developer.crowdrise.io System

parameters:

  salt_config_script:
    description: User Data script to configure salt and get it going
    type: string
    default: |
      #!/bin/bash -x
      exec 2>&1
      exec 1>/var/log/bootstrap-debug.log
      ps auxwwef
      sleep 120
      echo after sleep
      ps auxwwef
      userdel ubuntu
      groupdel ubuntu
      rm -f /var/lib/dpkg/lock
      mkdir -p /var/lib/cloud/data
      hostname | tee /var/lib/cloud/data/previous-hostname
      export DEBIAN_FRONTEND=noninteractive
      curl -L https://bootstrap.pypa.io/get-pip.py | python
      sleep 5s
      pip install pyrax
      curl -L https://bootstrap.saltstack.com | sh -s -- -A master1.salt.prod1.crowdrise.io -U -P git 2014.7 2>&1 | tee -a /var/log/bootstrap.log
      ( salt-call saltutil.sync_all || true ) | tee -a /var/log/bootstrap.log
      ( salt-call state.top tops/mintop.sls || true ) | tee -a /var/log/bootstrap.log
      ( salt-call state.highstate || true ) | tee -a /var/log/bootstrap.log
      service salt-minion stop
      rm -rf /var/cache/salt
      service salt-minion start
      ( salt-call state.highstate || true ) | tee -a /var/log/bootstrap.log
      ( salt-call state.highstate || true ) | tee -a /var/log/bootstrap.log
      if ! [ -f /var/log/firstboot ]; then
        touch /var/log/firstboot
        reboot
      fi

  system_name:
    description: name for the server instance
    type: string
    default: http1.developer.prod1.crowdrise.io

  system_image:
    type: string
    label: Server OS Image
    description: Operating system for VM
    default: 'Ubuntu 14.10 (Utopic Unicorn)'
    constraints:
      -
        allowed_values:
          - '14.10 Base Image 2014-12-19 PVHVM'
          - 'Ubuntu 14.10 (Utopic Unicorn) (PVHVM)'
          - 'Ubuntu 14.10 (Utopic Unicorn)'
          - 'Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)'
          - 'Ubuntu 14.04 LTS (Trusty Tahr)'
          - 'Ubuntu 12.04 LTS (Precise Pangolin) (PVHVM)'
          - 'Ubuntu 12.04 LTS (Precise Pangolin)'

  system_flavor:
    type: string
    label: VM Flavor
    description: VM Flavor
    default: '1GB Standard Instance'
    constraints:
      -
        allowed_values:
          - '512MB Standard Instance'
          - '1GB Standard Instance'
          - '2GB Standard Instance'
          - '4GB Standard Instance'
          - '8GB Standard Instance'
          - '15GB Standard Instance'
          - '30GB Standard Instance'
          - '15 GB Compute v1'
          - '30 GB Compute v1'
          - '3.75 GB Compute v1'
          - '60 GB Compute v1'
          - '7.5 GB Compute v1'
          - '1 GB General Purpose v1'
          - '2 GB General Purpose v1'
          - '4 GB General Purpose v1'
          - '8 GB General Purpose v1'
          - '120 GB I/O v1'
          - '15 GB I/O v1'
          - '30 GB I/O v1'
          - '60 GB I/O v1'
          - '90 GB I/O v1'
          - '120 GB Memory v1'
          - '15 GB Memory v1'
          - '240 GB Memory v1'
          - '30 GB Memory v1'
          - '60 GB Memory v1'
          - '1 GB Performance'
          - '2 GB Performance'
          - '4 GB Performance'
          - '8 GB Performance'
          - '120 GB Performance'
          - '15 GB Performance'
          - '30 GB Performance'
          - '60 GB Performance'
          - '90 GB Performance'

resources:
  CloudServer:
    type: 'Rackspace::Cloud::Server'
    properties:
      name: { get_param: system_name }
      flavor:
        get_param: system_flavor
      key_name: hop-2048
      image:
        get_param: system_image
      user_data: { get_param: salt_config_script }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }

outputs:
  accessIPv4:
    description: The manually assigned alternative public IPv4 address of the server.
    value:
      get_attr: ["CloudServer", "accessIPv4"]
  accessIPv6:
    description: The manually assigned alternative public IPv6 address of the server.
    value:
      get_attr: ["CloudServer", "accessIPv6"]
  addresses:
    description: A dict of all network addresses with corresponding port_id.
    value:
      get_attr: ["CloudServer", "addresses"]
  admin_pass:
    description: The administrator password for the server.
    value:
      get_attr: ["CloudServer", "admin_pass"]
  console_urls:
    description: 'URLs of server''s consoles. To get a specific console
      type, the requested type can be specified as parameter to the get_attr function,
      e.g. get_attr: [ <server>, console_urls, novnc ]. Currently supported types
      are novnc, xvpvnc, spice-html5, rdp-html5, serial.'
    value:
      get_attr: ["CloudServer", "console_urls"]
  distro:
    description: The Linux distribution on the server.
    value:
      get_attr: ["CloudServer", "distro"]
  first_address:
    description: 'Convenience attribute to fetch the first assigned
      network address, or an empty string if nothing has been assigned at this time.
      Result may not be predictable if the server has addresses from more than one
      network.'
    value:
      get_attr: ["CloudServer", "first_address"]
  instance_name:
    description: AWS compatible instance name.
    value:
      get_attr: ["CloudServer", "instance_name"]
  name:
    description: Name of the server.
    value:
      get_attr: ["CloudServer", "name"]
  networks:
    description: 'A dict of assigned network addresses of the form: {"public":
      [ip1, ip2...], "private": [ip3, ip4]}.'
    value:
      get_attr: ["CloudServer", "networks"]
  privateIPv4:
    description: The private IPv4 address of the server.
    value:
      get_attr: ["CloudServer", "privateIPv4"]
  show:
    description: A dict of all server details as returned by the API.
    value:
      get_attr: ["CloudServer", "show"]

